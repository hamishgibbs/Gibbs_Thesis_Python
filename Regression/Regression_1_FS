{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Regression_1_FS","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"0wcvMun6VuAx","colab_type":"code","colab":{}},"source":["import geopandas\n","import pandas as pd\n","import numpy as np\n","from sklearn import linear_model\n","from sklearn import preprocessing\n","from sklearn import metrics\n","from sklearn import model_selection\n","from sklearn import kernel_ridge\n","from sklearn import svm\n","from sklearn import tree\n","from sklearn import dummy\n","from sklearn import covariance\n","from sklearn import feature_selection\n","from scipy import stats\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fQ1vrDrGlCoh","colab_type":"code","colab":{}},"source":["#sectoins:\n","#define which vars to predict\n","#assess regression accuracy with one variable (data only scaled)\n","#found best performing regression model\n","#computed feature selection for each variable with this regressor\n","#have results of regression with all variables and with optimized variables\n","#optimization did not contribute\n","\n","#Results:\n","#ided which variables would be predicted\n","#tried 8 different models to predict dry wght biomass (no time to try all models on all vars) - graphs here\n","#chose the best performing model (kernel ridge regression)\n","#Attempted to improve prediction accuracy by optimizing variables (used r2 fit to test) - number of vars for each ind_v, what they were\n","#This did not improve prediction accuracy\n","#Assessed regression accuracy with 5 fold cross validation MSE - show both optimized and non-optimized\n","\n","#later:\n","#predicted 3 of the best performing variables using the trained model (no accuracy numbers)\n","\n","#issues - could have tried all models on all variables and all optimizations\n","#reason that optimized r2 is lower than non-optimized? wtf is that?\n","#probably f score doenst represent actaul predictive power"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mCGJuIeJWD-4","colab_type":"code","outputId":"8413b19a-e8f4-4d48-ab57-e95a09db48cc","executionInfo":{"status":"ok","timestamp":1563448833675,"user_tz":-60,"elapsed":1595,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}},"colab":{"base_uri":"https://localhost:8080/","height":303}},"source":["fw_pts = geopandas.read_file('/Volumes/Gibbs_Drive/Data_Master/Points_S2_VI_S1_BP_S2RAT_S1RAT.shp')\n","points = fw_pts\n","print(' ')\n","points.plot()"],"execution_count":550,"outputs":[{"output_type":"stream","text":[" \n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x1a2b92d7f0>"]},"metadata":{"tags":[]},"execution_count":550},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"_UYcZP2XWIu_","colab_type":"code","colab":{}},"source":["#Names of the independent variables that will be predicted:\n","y_col_names = ['Dry_wgh', 'Frsh_wg', 'FDN', 'FDA', 'CP', 'DIVMS']\n","\n","#Names of the predictor variables\n","X_col_names = list(points)[23:(len(list(points))-1)]\n","#X_col_names = X_col_names[0:37] + X_col_names[(len(X_col_names)-2):]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p4oxBx02cjjQ","colab_type":"code","colab":{}},"source":["#Choose which variable to predict\n","var = ['Frsh_wg']\n","y = np.array(points.loc[:, var])\n","X = points.loc[:, X_col_names]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hDH5Np091oM8","colab_type":"code","outputId":"8361a616-402f-4415-c0f3-ed9546fa983f","executionInfo":{"status":"ok","timestamp":1563450121341,"user_tz":-60,"elapsed":261,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_scaled = X\n","\n","for col in list(X):\n","  X_scaled.loc[:, col] = preprocessing.scale(np.array(X.loc[:, col]))\n","X_scaled = X_scaled.to_numpy()\n","\n","#Check that array is in the form (n_samples, n_features)\n","X_scaled.shape"],"execution_count":603,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(242, 129)"]},"metadata":{"tags":[]},"execution_count":603}]},{"cell_type":"code","metadata":{"id":"JzbHXa3xXbRw","colab_type":"code","outputId":"9a0d07d7-ac46-495b-e6ba-18262723cbbf","executionInfo":{"status":"ok","timestamp":1563450122829,"user_tz":-60,"elapsed":54,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["y = preprocessing.scale(y)\n","y = np.ravel(y)\n","y.shape"],"execution_count":604,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(242,)"]},"metadata":{"tags":[]},"execution_count":604}]},{"cell_type":"code","metadata":{"id":"997mtbSZ1gZ7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"999cb282-c43a-4a1a-883d-6668af367663","executionInfo":{"status":"ok","timestamp":1563534133936,"user_tz":-60,"elapsed":2667,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["#exploratory analysis of scaled y data plot histogram of each\n","descriptive = []\n","\n","for var in y_col_names:\n","  y = np.array(points.loc[:, var])\n","  #y = preprocessing.scale(y)\n","  #y = np.ravel(y)\n","\n","  fig, ax = plt.subplots()\n","  ax.hist(y, bins=20, color='k', label=var)\n","\n","  ax.set(title=var)\n","  ax.grid()\n","\n","  path = '/Volumes/Gibbs_Drive/Results/Exploratory_Analysis/'\n","  im_name = path + var + '.png'\n","  fig.savefig(im_name)\n","  \n","  describe = stats.describe(y)\n","  #print(describe)\n","  descriptive.append((var, describe.nobs, describe.minmax[0], describe.minmax[1], describe.mean, describe.variance, describe.skewness, describe.kurtosis))\n","descriptive_df = pd.DataFrame.from_dict(descriptive, orient='columns', dtype=None, columns=None)\n","descriptive_df.columns = ['var_name', 'n_obs', 'min', 'max', 'mean', 'variance', 'skewness', 'kurtosis']\n","descriptive_df.to_csv(path + 'Descriptive_Stats.csv')\n","\n","#Remove outliers from Dry_wgh, Frsh_wg, CP, DIVMS"],"execution_count":635,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"3WNAtM8G6Bgl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"73b6b238-dd3c-4bda-91bf-4c7cb1960b82","executionInfo":{"status":"ok","timestamp":1563534391831,"user_tz":-60,"elapsed":63,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["#remove outliers from some variables (those points with z score > 3)\n","for var in y_col_names:\n","  y = np.array(points.loc[:, var])\n","  z = np.abs(stats.zscore(y))\n","  threshold = 3\n","  print(var)\n","  print(np.where(z > 3))\n","\n","#going to remove at max 3 values from each variable"],"execution_count":638,"outputs":[{"output_type":"stream","text":["Dry_wgh\n","(array([175, 204, 208]),)\n","Frsh_wg\n","(array([176, 204, 208]),)\n","FDN\n","(array([], dtype=int64),)\n","FDA\n","(array([87]),)\n","CP\n","(array([22]),)\n","DIVMS\n","(array([ 87, 147]),)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U1elpVpt4uDD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":833},"outputId":"d7371368-e1e2-4643-8d92-48cb8a8ec56e","executionInfo":{"status":"ok","timestamp":1563533961428,"user_tz":-60,"elapsed":46,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["descriptive"],"execution_count":631,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('Dry_wgh',\n","  242,\n","  -1.4034143802782062,\n","  3.54028629356747,\n","  -3.5233524087277696e-16,\n","  1.0041493775933614,\n","  0.9789434998281087,\n","  0.4221409640619411),\n"," ('Frsh_wg',\n","  242,\n","  -1.4041036750469083,\n","  3.296128050527415,\n","  0.0,\n","  1.004149377593361,\n","  0.9230271416001463,\n","  0.33312207959433326),\n"," ('FDN',\n","  242,\n","  -1.7220305896668686,\n","  2.3155563755314286,\n","  -2.202095255454856e-16,\n","  1.0041493775933608,\n","  0.38478977425252303,\n","  -1.0639091893524533),\n"," ('FDA',\n","  242,\n","  -1.7529708525692345,\n","  3.4246907017309374,\n","  3.8169651094550837e-16,\n","  1.004149377593361,\n","  0.5883095497433787,\n","  -0.19790202158413228),\n"," ('CP',\n","  242,\n","  -1.8619705017352517,\n","  3.3758230290479014,\n","  2.348901605818513e-16,\n","  1.0041493775933612,\n","  0.7149922621069026,\n","  0.13763069399210615),\n"," ('DIVMS',\n","  242,\n","  -3.4514112814861218,\n","  1.6243441832461045,\n","  -1.7616762043638848e-16,\n","  1.0041493775933612,\n","  -0.8487141735789896,\n","  0.3668825953375765)]"]},"metadata":{"tags":[]},"execution_count":631}]},{"cell_type":"code","metadata":{"id":"HElX3vkYF0_J","colab_type":"code","colab":{}},"source":["#select only the highest correlated features (reject those with low f score)\n","#selector = feature_selection.SelectKBest(feature_selection.f_regression, k=50)\n","#X_new = selector.fit_transform(X_scaled, y)\n","#X_scaled = X_new"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5qb7vpb8jg1V","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":867},"outputId":"42bf9f5d-3f43-4a7e-fc38-461d93cf1cea","executionInfo":{"status":"ok","timestamp":1563380024098,"user_tz":-60,"elapsed":48,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["#cols = selector.get_support(indices=True)\n","\n","#X_col_new = X.iloc[:, cols]\n","\n","#This is the list of the variables that are being used - no S1 data is in here\n","#list(X_col_new)"],"execution_count":501,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['B6',\n"," 'B7',\n"," 'B8',\n"," 'B8A',\n"," 'B11',\n"," 'arvi',\n"," 'dvi',\n"," 'gemi',\n"," 'ipvi',\n"," 'ireci',\n"," 'msavi',\n"," 'msavi2',\n"," 'pssra',\n"," 'pvi',\n"," 'rvi',\n"," 'savi',\n"," 'tndvi',\n"," 'tsavi',\n"," 'wdvi',\n"," 'S0_VV_N',\n"," 'lai',\n"," 'lai_cab',\n"," 'fapar',\n"," 'fcover',\n"," 'B2vB6',\n"," 'B2vB7',\n"," 'B2vB8A',\n"," 'B3vB6',\n"," 'B3vB7',\n"," 'B3vB8A',\n"," 'B4vB5',\n"," 'B4vB6',\n"," 'B4vB7',\n"," 'B4vB8',\n"," 'B4vB8A',\n"," 'B4vB11',\n"," 'B5vB4',\n"," 'B5vB6',\n"," 'B5vB7',\n"," 'B5vB8A',\n"," 'B6vB2',\n"," 'B6vB3',\n"," 'B6vB4',\n"," 'B6vB5',\n"," 'B7vB4',\n"," 'B8vB4',\n"," 'B8AvB4',\n"," 'B11vB4',\n"," 'B11vB12',\n"," 'B12vB11']"]},"metadata":{"tags":[]},"execution_count":501}]},{"cell_type":"code","metadata":{"id":"ygnYoUaOc5xM","colab_type":"code","outputId":"18a5a879-2a60-4fa3-ef02-6d59a5c0e0bf","executionInfo":{"status":"ok","timestamp":1563378080248,"user_tz":-60,"elapsed":53,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["X_train, X_test, y_train, y_test = model_selection.train_test_split(X_scaled, y, test_size=0.3, random_state=0)\n","print(X_train.shape, y_train.shape)\n","print(X_test.shape, y_test.shape)"],"execution_count":456,"outputs":[{"output_type":"stream","text":["(169, 50) (169,)\n","(73, 50) (73,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PerB12E7eab3","colab_type":"code","colab":{}},"source":["#Add in a comparison between the model and dummy variables\n","def reg_plot(reg, X_scaled, y):\n","  X_train, X_test, y_train, y_test = model_selection.train_test_split(X_scaled, y, test_size=0.3, random_state=0)\n","  reg.fit(X_train, y_train)\n","  pred = reg.predict(X_test)\n","  mse = metrics.mean_squared_error(y_test, pred)\n","  r2 = metrics.r2_score(y_test, pred)\n","  print('MSE: %0.2f, R2: %0.2f' % (mse, r2))\n","  plt.plot(range(0, len(y_test)), y_test, color='green', linewidth=2, label='Ground Truth')\n","  plt.plot(range(0, len(y_test)), pred, color='blue', linewidth=2, label = 'Prediction')\n","  plt.legend()\n","  return(r2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-hXoylUZdxlv","colab_type":"code","colab":{}},"source":["def r2_test(reg, X_scaled, y):\n","  X_train, X_test, y_train, y_test = model_selection.train_test_split(X_scaled, y, test_size=0.3, random_state=0)\n","  reg.fit(X_train, y_train)\n","  pred = reg.predict(X_test)\n","  mse = metrics.mean_squared_error(y_test, pred)\n","  r2 = metrics.r2_score(y_test, pred)\n","  return(r2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tZxrEjjc8s2-","colab_type":"code","colab":{}},"source":["#something wrong with cross validation - these are the test scores not train scores?\n","def cross_validate(reg, X_scaled, y):\n","  #5 fold-cross validation \n","  mse_scores = model_selection.cross_validate(reg, X_scaled, y, scoring='neg_median_absolute_error', cv=5)\n","  mse_scores = mse_scores['test_score']\n","  #print(\"MSE Accuracy: %0.2f (+/- %0.2f)\" % (mse_scores.mean(), mse_scores.std() * 2 ))\n","  return(mse_scores.mean())"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_S6kjJuwstAL","colab_type":"code","colab":{}},"source":["def dummy_validate(X_scaled, y):\n","  reg = dummy.DummyRegressor(strategy='mean')\n","  ev_scores = model_selection.cross_val_score(reg, X_scaled, y, scoring='explained_variance', cv=5)\n","  print(\"Dummy EV Accuracy: %0.2f (+/- %0.2f)\" % (ev_scores.mean(), ev_scores.std()))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0MADvg2Qx1BT","colab_type":"code","colab":{}},"source":["#compare all models on fresh weight biomass variable\n","model_data = []"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7z_paSmsfg_5","colab_type":"code","outputId":"a01559b5-5772-44c9-a433-5b21ccc364bb","executionInfo":{"status":"ok","timestamp":1563450186717,"user_tz":-60,"elapsed":721,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["#use MSE and r2 to assess accuracy\n","#Linear regression\n","reg = linear_model.LinearRegression()\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))\n","\n","\n","X_train, X_test, y_train, y_test = model_selection.train_test_split(X_scaled, y, test_size=0.3, random_state=0)\n","reg.fit(X_train, y_train)\n","pred = reg.predict(X_test)\n","fig, ax = plt.subplots()\n","ax.plot(range(0, len(y_test)), y_test, color='green', linewidth=2, label='Ground Truth')\n","ax.plot(range(0, len(y_test)), pred, color='blue', linewidth=2, label = 'Prediction')\n","\n","ax.set(title='Multiple Linear Regression')\n","ax.grid()\n","ax.legend()\n","\n","fig.savefig(\"/Volumes/Gibbs_Drive/Results/MLR_plot.png\")\n","plt.show()"],"execution_count":610,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"xlKiVfZgtmJ7","colab_type":"code","colab":{}},"source":["#try a Ridge regression\n","reg = linear_model.Ridge(alpha=.5)\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wty3DhLCt_3b","colab_type":"code","colab":{}},"source":["#Lasso regression\n","reg = linear_model.Lasso(alpha=0.1)\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OS4-r4G5u6lD","colab_type":"code","colab":{}},"source":["#Bayesian ridge regression\n","reg = linear_model.BayesianRidge()\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ENmb2OUCw4-C","colab_type":"code","outputId":"2159a22f-118a-4a27-8eb6-e2e4a3c0e194","executionInfo":{"status":"ok","timestamp":1563456845123,"user_tz":-60,"elapsed":541,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["#Kernel ridge regression - using kernel ridge regression for other vars (it has highest MSE cross val accuracy)\n","reg = kernel_ridge.KernelRidge()\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))\n","\n","\n","X_train, X_test, y_train, y_test = model_selection.train_test_split(X_scaled, y, test_size=0.3, random_state=0)\n","reg.fit(X_train, y_train)\n","pred = reg.predict(X_test)\n","fig, ax = plt.subplots()\n","ax.plot(range(0, len(y_test)), y_test, color='green', linewidth=2, label='Ground Truth')\n","ax.plot(range(0, len(y_test)), pred, color='blue', linewidth=2, label = 'Prediction')\n","\n","ax.set(title='Kernel Ridge Regression')\n","ax.grid()\n","ax.legend()\n","\n","fig.savefig(\"/Volumes/Gibbs_Drive/Results/KRR_plot.png\")\n","plt.show()"],"execution_count":611,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"vDBXScnFx4pq","colab_type":"code","outputId":"68556b9e-2283-4469-a391-c622c3a1fbbc","executionInfo":{"status":"ok","timestamp":1563448874260,"user_tz":-60,"elapsed":1676,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"source":["#Linear support vector regression\n","reg = svm.LinearSVR(max_iter=5000)\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))"],"execution_count":565,"outputs":[{"output_type":"stream","text":["/anaconda3/lib/python3.6/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/anaconda3/lib/python3.6/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/anaconda3/lib/python3.6/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/anaconda3/lib/python3.6/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/anaconda3/lib/python3.6/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/anaconda3/lib/python3.6/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"of2r5VSiy0Mx","colab_type":"code","colab":{}},"source":["#Standard decision tree regressor\n","reg = tree.DecisionTreeRegressor()\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"k6BjTFuFzZCI","colab_type":"code","colab":{}},"source":["#Extremely random tree regression\n","reg = tree.ExtraTreeRegressor()\n","mse = cross_validate(reg, X_scaled, y)\n","r2 = r2_test(reg, X_scaled, y)\n","model_data.append((type(reg).__name__, mse, r2))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"f2AGoxAHyovn","colab_type":"code","colab":{}},"source":["model_compare_df = pd.DataFrame.from_dict(model_data, orient='columns', dtype=None, columns=None)\n","model_compare_df.columns = ['model_name', 'cv_mse', 'r2']\n","model_compare_df.to_csv('/Volumes/Gibbs_Drive/Results/Model_Comparison.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y2lk47mMzNr8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"a9a0886e-f067-4744-910f-f23950d77f81","executionInfo":{"status":"ok","timestamp":1563448879648,"user_tz":-60,"elapsed":79,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["#decide which model to use\n","mse_max = model_compare_df['cv_mse'].idxmax()\n","r2_max = model_compare_df['r2'].idxmax()\n","  \n","#best mse model\n","print(model_compare_df.loc[mse_max, :])\n","print()\n","#best r2 model\n","print(model_compare_df.loc[r2_max, :])\n","\n","#choosing to use kernel ridge regression because it has highest negative mse (lowest mse)"],"execution_count":569,"outputs":[{"output_type":"stream","text":["model_name    KernelRidge\n","cv_mse          -0.649007\n","r2               0.518494\n","Name: 4, dtype: object\n","\n","model_name    KernelRidge\n","cv_mse          -0.649007\n","r2               0.518494\n","Name: 4, dtype: object\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"em3sQDtlwzIb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"dd71f745-8d2b-4716-dce5-3e47ed649300","executionInfo":{"status":"ok","timestamp":1563449394673,"user_tz":-60,"elapsed":140433,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["#so, have decided on kernel ridge regression\n","#now, for each variable - make new y\n","#scale X\n","#for each number of possible variables, see which number produces best r2 result\n","\n","var_nums = []\n","variables =[]\n","prediction_results = []\n","\n","for var in y_col_names:\n","  print(var)\n","  y = np.array(points.loc[:, var])\n","  y = preprocessing.scale(y)\n","  y = np.ravel(y)\n","\n","  data_list = []\n","\n","  feature_nums = range(1, 129)\n","\n","  #Scale Data\n","  X_scaled = X\n","\n","  for col in list(X):\n","    X_scaled.loc[:, col] = preprocessing.scale(np.array(X.loc[:, col]))\n","  X_scaled = X_scaled.to_numpy()\n","  \n","  for num in feature_nums:\n","    X_new = feature_selection.SelectKBest(feature_selection.f_regression, k=num).fit_transform(X_scaled, y)\n","    X_scaled = X_new\n","  \n","    reg = kernel_ridge.KernelRidge()\n","    mse = cross_validate(reg, X_scaled, y)\n","    r2 = r2_test(reg, X_scaled, y)\n","     \n","    data_list.append((num, mse, r2))\n","    \n","    X_scaled = X\n","    for col in list(X):\n","      X_scaled.loc[:, col] = preprocessing.scale(np.array(X.loc[:, col]))\n","    X_scaled = X_scaled.to_numpy()\n","    \n","  metric_df = pd.DataFrame.from_dict(data_list, orient='columns', dtype=None, columns=None)\n","  metric_df.columns = ['var_num', 'mse', 'r2']\n","  #seeing what results this gives\n","  r2_max = metric_df['r2'].idxmax()\n","\n","  var_nums.append(r2_max)\n","  \n","  selector = feature_selection.SelectKBest(feature_selection.f_regression, k=r2_max)\n","  X_new = selector.fit_transform(X_scaled, y)\n","  X_scaled = X_new\n","  \n","  cols = selector.get_support(indices=True)\n","  X_col_new = X.iloc[:, cols]\n","  variables.append(list(X_col_new))\n","\n","  reg = kernel_ridge.KernelRidge()\n","  mse = cross_validate(reg, X_scaled, y)\n","  r2 = r2_test(reg, X_scaled, y)\n","  prediction_results.append((var, mse, r2))\n","opt_prediction_df = pd.DataFrame.from_dict(prediction_results, orient='columns', dtype=None, columns=None)\n","opt_prediction_df.columns = ['var_name', 'cv_mse', 'r2']\n","opt_prediction_df.to_csv('/Volumes/Gibbs_Drive/Results/KRR_Optimized_Prediction_Results.csv')"],"execution_count":585,"outputs":[{"output_type":"stream","text":["Dry_wgh\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","Frsh_wg\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","FDN\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","FDA\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","CP\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","DIVMS\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MF6TbTpQn5q9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"outputId":"cf1757cd-9f15-4046-d4f2-a7c766e0e18a","executionInfo":{"status":"ok","timestamp":1563449430425,"user_tz":-60,"elapsed":57,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["var_nums, prediction_results"],"execution_count":586,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([99, 123, 70, 12, 5, 50],\n"," [('Dry_wgh', -0.48874285293487824, 0.6809646092641171),\n","  ('Frsh_wg', -0.6275479052794497, 0.5295559517310743),\n","  ('FDN', -0.7681372532074764, 0.09397669347184989),\n","  ('FDA', -0.7641807160995298, 0.16360668950622193),\n","  ('CP', -0.5579670780917134, 0.44027439134676527),\n","  ('DIVMS', -0.6945350692480238, 0.20679678903623555)])"]},"metadata":{"tags":[]},"execution_count":586}]},{"cell_type":"code","metadata":{"id":"Vh017FU_csL9","colab_type":"code","colab":{}},"source":["#metric_df = pd.DataFrame.from_dict(data_list, orient='columns', dtype=None, columns=None)\n","#metric_df.columns = ['var_num', 'mse', 'r2']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"A3F1jcYh0qZH","colab_type":"code","colab":{}},"source":["variables_df = pd.DataFrame.from_records(variables)\n","variables_df = variables_df.transpose()\n","variables_df.columns = y_col_names\n","variables_df.to_csv('/Volumes/Gibbs_Drive/Results/Optimized_Variable_Names.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZRqJBWUsqxhQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"outputId":"7f9e679c-244a-4364-cb5e-038c0801ca55","executionInfo":{"status":"ok","timestamp":1563449494797,"user_tz":-60,"elapsed":427,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["#Non-optimized kernel ridge regression\n","X_scaled = X\n","\n","for col in list(X):\n","  X_scaled.loc[:, col] = preprocessing.scale(np.array(X.loc[:, col]))\n","X_scaled = X_scaled.to_numpy()\n","\n","#Check that array is in the form (n_samples, n_features)\n","X_scaled.shape\n","\n","prediction_results_no_opt = []\n","\n","for var in y_col_names:\n","  print(var)\n","  y = np.array(points.loc[:, var])\n","  y = preprocessing.scale(y)\n","  y = np.ravel(y)\n","  reg = kernel_ridge.KernelRidge()\n","  mse = cross_validate(reg, X_scaled, y)\n","  r2 = r2_test(reg, X_scaled, y)\n","  prediction_results_no_opt.append((var, mse, r2))\n","no_opt_prediction_df = pd.DataFrame.from_dict(prediction_results_no_opt, orient='columns', dtype=None, columns=None)\n","no_opt_prediction_df.columns = ['var_name', 'cv_mse', 'r2']\n","no_opt_prediction_df.to_csv('/Volumes/Gibbs_Drive/Results/KRR_Non_Optimized_Prediction_Results.csv')"],"execution_count":587,"outputs":[{"output_type":"stream","text":["Dry_wgh\n","Frsh_wg\n","FDN\n","FDA\n","CP\n","DIVMS\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1OjAFUJW2JHt","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"outputId":"2def6830-ca84-4c45-91c2-60d8400fab73","executionInfo":{"status":"ok","timestamp":1563449834299,"user_tz":-60,"elapsed":720,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["#Non-optimized mlr\n","X_scaled = X\n","\n","for col in list(X):\n","  X_scaled.loc[:, col] = preprocessing.scale(np.array(X.loc[:, col]))\n","X_scaled = X_scaled.to_numpy()\n","\n","#Check that array is in the form (n_samples, n_features)\n","X_scaled.shape\n","\n","prediction_results_no_opt = []\n","\n","for var in y_col_names:\n","  print(var)\n","  y = np.array(points.loc[:, var])\n","  y = preprocessing.scale(y)\n","  y = np.ravel(y)\n","  reg = linear_model.LinearRegression()\n","  mse = cross_validate(reg, X_scaled, y)\n","  r2 = r2_test(reg, X_scaled, y)\n","  prediction_results_no_opt.append((var, mse, r2))\n","no_opt_prediction_df = pd.DataFrame.from_dict(prediction_results_no_opt, orient='columns', dtype=None, columns=None)\n","no_opt_prediction_df.columns = ['var_name', 'cv_mse', 'r2']\n","no_opt_prediction_df.to_csv('/Volumes/Gibbs_Drive/Results/MLR_Non_Optimized_Prediction_Results.csv')"],"execution_count":596,"outputs":[{"output_type":"stream","text":["Dry_wgh\n","Frsh_wg\n","FDN\n","FDA\n","CP\n","DIVMS\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lzKmWRknt7bZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"d68fa912-0765-41f3-a7db-92ac2065478e","executionInfo":{"status":"ok","timestamp":1563381382323,"user_tz":-60,"elapsed":65,"user":{"displayName":"Hamish Gibbs","photoUrl":"","userId":"03305838575095682177"}}},"source":["prediction_results, prediction_results_no_opt"],"execution_count":526,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([('Dry_wgh', -0.4877367982133083, 0.5891143685534972),\n","  ('Frsh_wg', -0.6648452426561174, 0.3702729848916274),\n","  ('FDN', -0.7280666652312855, 0.07654178418870039),\n","  ('FDA', -0.706475275019823, 0.12527852441755383),\n","  ('CP', -0.5730419381848417, 0.3858730788202307),\n","  ('DIVMS', -0.6945350692480069, 0.20679678903628418)],\n"," [('Dry_wgh', -0.48682656320955636, 0.6696560177725202),\n","  ('Frsh_wg', -0.6490070265990816, 0.5184944721765028),\n","  ('FDN', -0.86797124271485, 0.07308368270494192),\n","  ('FDA', -0.8128469610993209, 0.1550299927311527),\n","  ('CP', -0.5837786407027031, 0.4035731743917177),\n","  ('DIVMS', -0.7446806352868889, 0.2011410819759173)])"]},"metadata":{"tags":[]},"execution_count":526}]},{"cell_type":"code","metadata":{"id":"4bFCq5pt5TdW","colab_type":"code","colab":{}},"source":["#Now, need to write results section\n","\n","#1. model comparison\n","#2. non-optimized MLR performance\n","#3. non-optimized KRR performance\n","#4. Optimized KRR performance\n","#5. number of varibales, names, what contributed etc (s1)\n","\n","#next analysis\n","#- save a scaler so it can be undone\n","#- pickle a model for each variable\n","#- predict on a raster of rural colombia using each pickled model"],"execution_count":0,"outputs":[]}]}